//@version=5
indicator("Performance Tracker v2.0", shorttitle="PERF-TRACKER", overlay=true)

// ==================================================================================
// PERFORMANCE TRACKER v2.0 - FINAL CORRECTED VERSION
// ==================================================================================
// Chat 5 - June 24, 2025
// Connects to modified "Divergence for Many Indicators v5 with 4BB"
// Tracks performance, win rates, targets, and provides real-time analytics
// FIXES: White text color, improved signal detection
// ==================================================================================

// INPUT SETTINGS
show_performance_table = input.bool(true, "Show Performance Table")
show_entry_labels = input.bool(true, "Show Entry Labels")
target_timeout_bars = input.int(50, "Target Timeout bars", minval=10, maxval=200)

// DATA INPUT FROM MAIN INDICATOR
bullish_signal = input.source(close, "Bullish Divergence Signal")
bearish_signal = input.source(close, "Bearish Divergence Signal")
bb1_upper = input.source(close, "BB1 Upper Target")
bb1_lower = input.source(close, "BB1 Lower Target")
bb1_basis = input.source(close, "BB1 Basis Target")
current_price = input.source(close, "Current Price")

// SIGNAL DETECTION - IMPROVED
new_bullish = bullish_signal > 0 and bullish_signal[1] <= 0 and not (bullish_signal[2] > 0 or bullish_signal[3] > 0 or bullish_signal[4] > 0)
new_bearish = bearish_signal > 0 and bearish_signal[1] <= 0 and not (bearish_signal[2] > 0 or bearish_signal[3] > 0 or bearish_signal[4] > 0)

// DATA STRUCTURES
var signal_bars = array.new<int>()
var signal_types = array.new<string>()
var entry_prices = array.new<float>()
var target_prices = array.new<float>()
var signal_status = array.new<string>()
var duration_bars = array.new<int>()

// PERFORMANCE STATISTICS
var total_signals = 0
var bullish_signals = 0
var bearish_signals = 0
var completed_signals = 0
var winning_signals = 0
var losing_signals = 0
var timeout_signals = 0

// TARGET CALCULATION FUNCTIONS
get_bullish_target(entry_price, bb_upper) =>
    math.max(bb_upper, entry_price * 1.005)

get_bearish_target(entry_price, bb_lower) =>
    math.min(bb_lower, entry_price * 0.995)

// RECORD NEW BULLISH SIGNAL
if new_bullish
    total_signals := total_signals + 1
    bullish_signals := bullish_signals + 1
    
    entry = current_price
    target = get_bullish_target(entry, bb1_upper)
    
    array.push(signal_bars, bar_index)
    array.push(signal_types, "Bullish")
    array.push(entry_prices, entry)
    array.push(target_prices, target)
    array.push(signal_status, "Active")
    array.push(duration_bars, 0)

// RECORD NEW BEARISH SIGNAL
if new_bearish
    total_signals := total_signals + 1
    bearish_signals := bearish_signals + 1
    
    entry = current_price
    target = get_bearish_target(entry, bb1_lower)
    
    array.push(signal_bars, bar_index)
    array.push(signal_types, "Bearish")
    array.push(entry_prices, entry)
    array.push(target_prices, target)
    array.push(signal_status, "Active")
    array.push(duration_bars, 0)

// CHECK ACTIVE SIGNALS FOR COMPLETION
if array.size(signal_bars) > 0
    for i = 0 to array.size(signal_bars) - 1
        if array.get(signal_status, i) == "Active"
            signal_bar = array.get(signal_bars, i)
            signal_type = array.get(signal_types, i)
            target_price = array.get(target_prices, i)
            
            duration = bar_index - signal_bar
            array.set(duration_bars, i, duration)
            
            // Check for target hit
            target_hit = false
            
            if signal_type == "Bullish"
                target_hit := high >= target_price
            else
                target_hit := low <= target_price
            
            // Process signal completion
            if target_hit
                array.set(signal_status, i, "Target Hit")
                completed_signals := completed_signals + 1
                winning_signals := winning_signals + 1
                
            else if duration >= target_timeout_bars
                array.set(signal_status, i, "Timeout")
                completed_signals := completed_signals + 1
                timeout_signals := timeout_signals + 1

// ENTRY LABELS FOR NEW SIGNALS
if show_entry_labels and new_bullish
    label.new(bar_index, low, "BULL\n" + str.tostring(current_price, "#.##"), style=label.style_label_up, color=color.lime, textcolor=color.white, size=size.small)

if show_entry_labels and new_bearish
    label.new(bar_index, high, "BEAR\n" + str.tostring(current_price, "#.##"), style=label.style_label_down, color=color.red, textcolor=color.white, size=size.small)

// PERFORMANCE TABLE WITH WHITE TEXT
if show_performance_table and barstate.islast
    perf_table = table.new(position.bottom_right, 2, 8, bgcolor=color.new(color.white, 85), border_width=1, border_color=color.blue)
    
    table.cell(perf_table, 0, 0, "PERFORMANCE STATS", text_color=color.white, bgcolor=color.blue, text_size=size.normal)
    table.merge_cells(perf_table, 0, 0, 1, 0)
    
    table.cell(perf_table, 0, 1, "Total Signals", text_size=size.small, text_color=color.white)
    table.cell(perf_table, 1, 1, str.tostring(total_signals), text_size=size.small, text_color=color.white)
    
    table.cell(perf_table, 0, 2, "Bullish / Bearish", text_size=size.small, text_color=color.white)
    table.cell(perf_table, 1, 2, str.tostring(bullish_signals) + " / " + str.tostring(bearish_signals), text_size=size.small, text_color=color.white)
    
    table.cell(perf_table, 0, 3, "Completed Signals", text_size=size.small, text_color=color.white)
    table.cell(perf_table, 1, 3, str.tostring(completed_signals), text_size=size.small, text_color=color.white)
    
    win_rate = completed_signals > 0 ? winning_signals / completed_signals * 100 : 0
    win_color = win_rate >= 60 ? color.lime : win_rate >= 40 ? color.yellow : color.red
    table.cell(perf_table, 0, 4, "Win Rate", text_size=size.small, text_color=color.white)
    table.cell(perf_table, 1, 4, str.tostring(win_rate, "#.#") + "%", text_size=size.small, text_color=win_color)
    
    table.cell(perf_table, 0, 5, "Win / Timeout", text_size=size.small, text_color=color.white)
    table.cell(perf_table, 1, 5, str.tostring(winning_signals) + " / " + str.tostring(timeout_signals), text_size=size.small, text_color=color.white)
    
    active_count = total_signals - completed_signals
    table.cell(perf_table, 0, 6, "Active Signals", text_size=size.small, text_color=color.white)
    table.cell(perf_table, 1, 6, str.tostring(active_count), text_size=size.small, text_color=color.orange)
    
    status_text = total_signals > 0 ? "Tracking" : "Waiting"
    status_color = total_signals > 0 ? color.lime : color.orange
    table.cell(perf_table, 0, 7, "Status", text_size=size.small, text_color=color.white)
    table.cell(perf_table, 1, 7, status_text, text_size=size.small, text_color=status_color)

// ALERTS
alertcondition(new_bullish, "New Bullish Signal", "New Bullish Divergence tracked!")
alertcondition(new_bearish, "New Bearish Signal", "New Bearish Divergence tracked!")
alertcondition(winning_signals > winning_signals[1], "Target Hit", "Divergence target hit!")